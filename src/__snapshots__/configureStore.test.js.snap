// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`configureStore and inject reducers, sagas and thunks component A, with reducer and saga 1`] = `
Immutable.Map {
  "route": Immutable.Map {
    "location": null,
  },
}
`;

exports[`configureStore and inject reducers, sagas and thunks component A, with reducer and saga 2`] = `
<withReducer(withSaga(Connect(Component)))>
  <withSaga(Connect(Component))>
    <Connect(Component)>
      <Component
        name="Name A"
        nameSend={[Function]}
      >
        <span>
          Name A
        </span>
      </Component>
    </Connect(Component)>
  </withSaga(Connect(Component))>
</withReducer(withSaga(Connect(Component)))>
`;

exports[`configureStore and inject reducers, sagas and thunks component A, with reducer and saga 3`] = `
Immutable.Map {
  "route": Immutable.Map {
    "location": null,
  },
  "A/testReducer": "Name A",
}
`;

exports[`configureStore and inject reducers, sagas and thunks component A2, with reducer and saga should not override current state 1`] = `
Immutable.Map {
  "route": Immutable.Map {
    "location": null,
  },
  "A/testReducer": "Name A",
  "B/testReducer": "Name B",
  "C/testReducer": "Name C",
}
`;

exports[`configureStore and inject reducers, sagas and thunks component A2, with reducer and saga should not override current state 2`] = `
<withReducer(withSaga(Connect(Component)))>
  <withSaga(Connect(Component))>
    <Connect(Component)>
      <Component
        name="Name A"
        nameSend={[Function]}
      >
        <span>
          Name A
        </span>
      </Component>
    </Connect(Component)>
  </withSaga(Connect(Component))>
</withReducer(withSaga(Connect(Component)))>
`;

exports[`configureStore and inject reducers, sagas and thunks component A2, with reducer and saga should not override current state 3`] = `
Immutable.Map {
  "route": Immutable.Map {
    "location": null,
  },
  "A/testReducer": "Name A",
  "B/testReducer": "Name B",
  "C/testReducer": "Name C",
}
`;

exports[`configureStore and inject reducers, sagas and thunks component B, with reducer and saga 1`] = `
Immutable.Map {
  "route": Immutable.Map {
    "location": null,
  },
  "A/testReducer": "Name A",
}
`;

exports[`configureStore and inject reducers, sagas and thunks component B, with reducer and saga 2`] = `
<withReducer(withSaga(Connect(Component)))>
  <withSaga(Connect(Component))>
    <Connect(Component)>
      <Component
        name="Name B"
        nameSend={[Function]}
      >
        <span>
          Name B
        </span>
      </Component>
    </Connect(Component)>
  </withSaga(Connect(Component))>
</withReducer(withSaga(Connect(Component)))>
`;

exports[`configureStore and inject reducers, sagas and thunks component B, with reducer and saga 3`] = `
Immutable.Map {
  "route": Immutable.Map {
    "location": null,
  },
  "A/testReducer": "Name A",
  "B/testReducer": "Name B",
}
`;

exports[`configureStore and inject reducers, sagas and thunks component C, with reducer and using thunk 1`] = `
Immutable.Map {
  "route": Immutable.Map {
    "location": null,
  },
  "A/testReducer": "Name A",
  "B/testReducer": "Name B",
}
`;

exports[`configureStore and inject reducers, sagas and thunks component C, with reducer and using thunk 2`] = `
<withReducer(Connect(Component))>
  <Connect(Component)>
    <Component
      name="Name C"
      nameSend={[Function]}
    >
      <span>
        Name C
      </span>
    </Component>
  </Connect(Component)>
</withReducer(Connect(Component))>
`;

exports[`configureStore and inject reducers, sagas and thunks component C, with reducer and using thunk 3`] = `
Immutable.Map {
  "route": Immutable.Map {
    "location": null,
  },
  "A/testReducer": "Name A",
  "B/testReducer": "Name B",
  "C/testReducer": "Name C",
}
`;

exports[`configureStore and inject reducers, sagas and thunks default store 1`] = `
Immutable.Map {
  "route": Immutable.Map {
    "location": null,
  },
}
`;

exports[`configureStore default store, without parameters 1`] = `
Immutable.Map {
  "route": Immutable.Map {
    "location": null,
  },
}
`;

exports[`configureStore store with reducers and initialState parameter 1`] = `
Immutable.Map {
  "config": true,
  "route": Immutable.Map {
    "location": null,
  },
}
`;

exports[`configureStore store with reducers parameter 1`] = `
Immutable.Map {
  "route": Immutable.Map {
    "location": null,
  },
  "config": null,
}
`;
